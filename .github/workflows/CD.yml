name: CD to AWS ECS

on:
  pull_request:
    types: [closed]
    branches: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_BACKEND_REPOSITORY: ${{ vars.ECR_BACKEND_REPOSITORY }}
  ECR_NGINX_REPOSITORY: ${{ vars.ECR_NGINX_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_BACKEND_SERVICE: ${{ vars.ECS_BACKEND_SERVICE }}
  ECS_NGINX_SERVICE: ${{ vars.ECS_NGINX_SERVICE }}

jobs:
  deploy:
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev'   # ← 공백 추가
    name: Build & Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build application jar
        run: ./gradlew bootJar

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tags
        id: vars
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> "$GITHUB_OUTPUT"
          echo "latest_tag=latest" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check base images exist
        run: |
          docker manifest inspect public.ecr.aws/amazoncorretto/amazoncorretto:17-alpine3.20-jdk >/dev/null
          docker manifest inspect nginx:1.27-alpine >/dev/null

      # Backend 이미지: buildx에서 바로 push
      - name: Build & push backend image (with cache & retry)
        run: |
          set -e
          for i in 1 2 3; do
            echo "Backend build attempt #$i"
            docker buildx build \
              --pull \
              --push \                         # ← 여기서 바로 ECR로 push
              --progress=plain \
              --cache-from=type=gha,scope=backend \
              --cache-to=type=gha,mode=max,scope=backend \
              -t $ECR_BACKEND_REPOSITORY:${{ steps.vars.outputs.latest_tag }} \
              -t $ECR_BACKEND_REPOSITORY:${{ steps.vars.outputs.sha_tag }} \
              -f Dockerfile \
              . && break || sleep $((10*i))
          done

      # Nginx 이미지: buildx에서 바로 push
      - name: Build & push Nginx image (with cache & retry)
        run: |
          set -e
          for i in 1 2 3; do
            echo "Nginx build attempt #$i"
            docker buildx build \
              --pull \
              --push \                         # ← 여기서 바로 ECR로 push
              --progress=plain \
              --cache-from=type=gha,scope=nginx \
              --cache-to=type=gha,mode=max,scope=nginx \
              -t $ECR_NGINX_REPOSITORY:${{ steps.vars.outputs.latest_tag }} \
              -t $ECR_NGINX_REPOSITORY:${{ steps.vars.outputs.sha_tag }} \
              -f nginx/Dockerfile \
              . && break || sleep $((10*i))
          done

      - name: Force new deployment (backend)
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_BACKEND_SERVICE" \
            --force-new-deployment

      - name: Force new deployment (nginx)
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_NGINX_SERVICE" \
            --force-new-deployment