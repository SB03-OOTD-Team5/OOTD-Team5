name: CD to AWS ECS

on:
  pull_request:
    types:
      - closed        # PR이 닫힐 때(=머지 포함)
    branches:
      - main          # 대상 브랜치가 main인 PR
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_BACKEND_REPOSITORY: ${{ vars.ECR_BACKEND_REPOSITORY }}
  ECR_NGINX_REPOSITORY: ${{ vars.ECR_NGINX_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_BACKEND_SERVICE: ${{ vars.ECS_BACKEND_SERVICE }}
  ECS_NGINX_SERVICE: ${{ vars.ECS_NGINX_SERVICE }}

jobs:
  deploy:
    if: github.event.pull_request.merged == true &&
      github.event.pull_request.head.ref == 'dev'
    name: Build & Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build application jar
        run: ./gradlew bootJar

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tags
        id: vars
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> "$GITHUB_OUTPUT"
          echo "latest_tag=latest" >> "$GITHUB_OUTPUT"

      - name: Build backend image
        run: |
          docker build \
            -t $ECR_BACKEND_REPOSITORY:${{ steps.vars.outputs.latest_tag }} \
            -t $ECR_BACKEND_REPOSITORY:${{ steps.vars.outputs.sha_tag }} \
            .

      - name: Build Nginx image
        run: |
          docker build \
            -f nginx/Dockerfile \
            -t $ECR_NGINX_REPOSITORY:${{ steps.vars.outputs.latest_tag }} \
            -t $ECR_NGINX_REPOSITORY:${{ steps.vars.outputs.sha_tag }} \
            .

      - name: Push backend image
        run: |
          docker push $ECR_BACKEND_REPOSITORY:${{ steps.vars.outputs.latest_tag }}
          docker push $ECR_BACKEND_REPOSITORY:${{ steps.vars.outputs.sha_tag }}

      - name: Push Nginx image
        run: |
          docker push $ECR_NGINX_REPOSITORY:${{ steps.vars.outputs.latest_tag }}
          docker push $ECR_NGINX_REPOSITORY:${{ steps.vars.outputs.sha_tag }}

      - name: Force new deployment (backend)
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_BACKEND_SERVICE" \
            --force-new-deployment

      - name: Force new deployment (nginx)
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_NGINX_SERVICE" \
            --force-new-deployment
