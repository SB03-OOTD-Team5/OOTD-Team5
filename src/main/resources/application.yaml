spring:
  application:
    name: OOTD-5Team
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
#   OAuth2 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}

  servlet:
    multipart:
      max-file-size: 50MB        # 스프링 전역 업로드 허용 파일 크기
      max-request-size: 50MB     # 요청 전체 크기

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
#    로컬 실행 시: KAFKA_BOOTSTRAP_SERVERS=localhost:29092
#    Docker 실행 시: KAFKA_BOOTSTRAP_SERVERS=kafka:9092

# Confluent Cloud
#    bootstrap-servers: pkc-xxxxxx.ap-northeast-2.aws.confluent.cloud:9092
#    properties:
#      security.protocol: SASL_SSL
#      sasl.mechanism: PLAIN
#      sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="API_KEY" password="API_SECRET";
    consumer:
      group-id: ootd.notification
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

# SecurityConfig 비활성화/활성화 on off
app:
  security:
    enabled: true

#외부 API key 설정
weather:
  api-client:
    provider: ${WEATHER_API_CLIENT:kma} # 기본값=kma, 2순위API='meteo'
  kakao:
    base-url: https://dapi.kakao.com/v2/local/geo/coord2regioncode.json
    client-secret: ${KAKAO_CLIENT_SECRET}
  kma: #기상청
    base-url: https://apihub.kma.go.kr/api/typ02/openApi/VilageFcstInfoService_2.0/getVilageFcst
    #base-url: https://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst
    client-secret: ${KMA_CLIENT_SECRET}

# Swagger UI
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    display-request-duration: true
    operations-sorter: method

swagger:
  server-url: http://localhost:${server.port}

# Admin 설정
ootd:
  admin:
    username: ${OOTD_ADMIN_USERNAME}
    password: ${OOTD_ADMIN_PASSWORD}
    email: ${OOTD_ADMIN_EMAIL}
    # 임시 비밀번호 전송하는 이메일 설정
  email:
    sender: ${OOTD_EMAIL_SENDER}

  # Access Token 및 Refresh Token 비밀키, 만료시간 설정
  jwt:
    access-token:
      expiration-ms: 1800000 # 30분
      secret: ${JWT_ACCESS_TOKEN_SECRET:change-me-access-secret-for-dev-only}

    refresh-token:
      expiration-ms: 604800000 # 7일
      secret: ${JWT_REFRESH_TOKEN_SECRET:change-me-refresh-secret-for-dev-only}

  storage:
    type: ${STORAGE_TYPE:s3}
    s3:
      access-key: ${AWS_ACCESS_KEY_ID:dummy-access-key}
      secret-key: ${AWS_SECRET_ACCESS_KEY:dummy-secret-key}
      region: ${AWS_REGION:ap-northeast-2}
      bucket: ${AWS_S3_BUCKET:zzootd-s3}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:600}
      max-upload-size: 20MB   # 실제 정책상 허용할 크기
      prefix:
        clothes: "clothes/"
        profiles: "profiles/"

  jsoup:
    timeout: 5000
    user-agent: "OOTD-Extractor/1.0"

  sse:
    repository: ${OOTD_SSE_REPOSITORY:redis}  #momory
