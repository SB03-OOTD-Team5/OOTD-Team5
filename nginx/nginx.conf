# /etc/nginx/nginx.conf
# 역할: Spring Boot 앱(8080) 앞단에서 리버스 프록시 + 로드밸런서
# - 기본은 HTTP(80). HTTPS는 맨 아래 주석 블록 참고.
# - /ws/** 경로는 WebSocket 업그레이드 헤더를 그대로 전달
# - /api/sse 경로는 SSE 스트리밍이 끊기지 않도록 버퍼링 비활성화
# - 파일 업로드는 50MB까지 허용 (Spring 설정과 맞춤)

user  nginx;                      # Nginx 워커 프로세스를 어떤 OS 사용자 계정으로 실행할지
worker_processes  auto;           # CPU 코어 수에 맞춰 워커 프로세스 개수를 자동으로 설정

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  sendfile      on;
  server_tokens off;

    # DNS 리졸버 추가 (VPC DNS 서버)
    resolver 169.254.169.253 valid=10s;
    resolver_timeout 5s;

  upstream backend_upstream {
      # Cloud Map DNS 이름으로 자동 디스커버리
      # backend.internal.local이 2개의 백엔드 IP로 자동 resolve됨
    server backend.internal.local:8080;
  }

  server {
    listen 80;
    server_name _;

    # 1) WebSocket(/ws/*) 프록시
    location /ws/ {
        proxy_pass http://backend_upstream;

        # 프록시 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;

        # 프록시 설정
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # 업스트림 연결 유지 및 HTTP/1.1 사용
        proxy_http_version 1.1;

        # WebSocket 업그레이드 헤더 설정
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # CSRF 토큰 헤더 전달
        proxy_set_header X-XSRF-TOKEN $http_x_xsrf_token;
        proxy_set_header Cookie $http_cookie;

        # 프록시 응답 시간 추가 (로깅용)
        add_header X-Upstream-Response-Time $upstream_response_time;

        # 실제 요청을 처리하는 서버 IP 추가
        add_header X-Upstream-Server $upstream_addr;
    }

    # SSE 프록시 설정 개선
    location /api/sse {
        proxy_pass http://backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 쿠키에서 XSRF-TOKEN 추출하여 헤더로 설정
        set $csrf_token "";
        if ($http_cookie ~* "XSRF-TOKEN=([^;]+)") {
            set $csrf_token $1;
        }

        # CSRF 토큰 헤더 전달 (중요!)
        proxy_set_header X-XSRF-TOKEN $http_x_xsrf_token;
        proxy_set_header Cookie $http_cookie;

        # SSE 관련 설정
        proxy_buffering off;
        proxy_cache off;
        proxy_read_timeout 24h;
        proxy_send_timeout 24h;
        proxy_set_header Connection '';

        # 실제 요청을 처리하는 서버 IP 추가
        add_header X-Upstream-Server $upstream_addr;
    }

    # 2) REST API(/api/*) 프록시
    location /api/ {
        proxy_pass http://backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CSRF 토큰 헤더 전달 (중요!)
        proxy_set_header X-XSRF-TOKEN $http_x_xsrf_token;
        proxy_set_header Cookie $http_cookie;

        # 실제 요청을 처리하는 서버 IP 추가
        add_header X-Upstream-Server $upstream_addr;
    }

    # 3) 정적(프론트) — 나머지 전체
    root /usr/share/nginx/html;
    index index.html;

    # SPA 라우팅 고려: 없는 파일이면 index.html
    location / {
      try_files $uri $uri/ /index.html;
    }
  }
}
